name: CI/CD Pipeline - Build and Deploy to OpenShift

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker images to GHCR
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push prod-service
        run: |
          echo "${{ secrets.REPO_NAME }}"
          docker build --no-cache -t ghcr.io/${{ secrets.REPO_NAME }}/prod-service:latest ./services/prod-service
          docker push ghcr.io/${{ secrets.REPO_NAME }}/prod-service:latest

      - name: Build and Push users-service
        run: |
          docker build --no-cache -t ghcr.io/${{ secrets.REPO_NAME }}/users-service:latest ./services/users-service
          docker push ghcr.io/${{ secrets.REPO_NAME }}/users-service:latest

      - name: Build and Push frontend-new
        run: |
          docker build --no-cache -t ghcr.io/${{ secrets.REPO_NAME }}/frontend-new:latest ./frontend
          docker push ghcr.io/${{ secrets.REPO_NAME }}/frontend-new:latest

  deploy:
    name: Deploy to OpenShift using Helm
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/oc

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}

      - name: Create Namespace if not exists
        run: |
          oc get namespace yakprog-dev || oc create namespace yakprog-dev

      - name: Create MongoDB Secret from GitHub Secrets
        run: |
          oc delete secret mongo-uri-secret --ignore-not-found -n yakprog-dev
          oc create secret generic mongo-uri-secret \
            --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
            -n yakprog-dev

      - name: Deploy with Helm
        run: |
          helm upgrade --install app ./helm/app-chart --namespace yakprog-dev
